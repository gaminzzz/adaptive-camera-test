local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

local lockOnTarget = nil
local isLockedOn = false
local cameraDistance = 10
local minZoom = 5
local maxZoom = 20
local lockOnRange = 100

local indicator = script.Parent:WaitForChild("LockOnIndicator")

-- Scroll wheel zoom
UserInputService.InputChanged:Connect(function(input)
	if isLockedOn and input.UserInputType == Enum.UserInputType.MouseWheel then
		cameraDistance = math.clamp(cameraDistance - input.Position.Z, minZoom, maxZoom)
	end
end)

-- Camera update function
local function updateCamera()
	if isLockedOn and lockOnTarget and lockOnTarget.Character and lockOnTarget.Character:FindFirstChild("HumanoidRootPart") then
		local targetHRP = lockOnTarget.Character.HumanoidRootPart
		local character = LocalPlayer.Character
		if not character or not character:FindFirstChild("HumanoidRootPart") then return end

		local playerHRP = character.HumanoidRootPart

		-- Custom third-person lock-on camera position: above and over the shoulder
		local heightOffset = Vector3.new(0, 5, 0) -- higher above player
		local shoulderOffset = playerHRP.CFrame.RightVector * 2 -- slight right shoulder view
		local backOffset = -playerHRP.CFrame.LookVector * cameraDistance -- back based on zoom

		local cameraPosition = playerHRP.Position + backOffset + heightOffset + shoulderOffset
		local lookAt = targetHRP.Position + Vector3.new(0, 2, 0)

		Camera.CFrame = CFrame.new(cameraPosition, lookAt)
	end
end

-- Function to enable lock-on mode
local function enableLockOn()
	local rayOrigin = Camera.CFrame.Position
	local rayDirection = Camera.CFrame.LookVector * lockOnRange

	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

	local result = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)

	if result and result.Instance then
		local hitPart = result.Instance
		local targetModel = hitPart:FindFirstAncestorOfClass("Model")
		if targetModel and Players:GetPlayerFromCharacter(targetModel) then
			lockOnTarget = Players:GetPlayerFromCharacter(targetModel)
			print("[Lock-On] Locked onto:", lockOnTarget.Name)
			indicator.Visible = true
			Camera.CameraType = Enum.CameraType.Scriptable
			RunService:BindToRenderStep("LockOnCamera", Enum.RenderPriority.Camera.Value + 1, updateCamera)
		else
			print("[Lock-On] No valid player.")
			isLockedOn = false
		end
	else
		print("[Lock-On] Nothing hit.")
		isLockedOn = false
	end
end

-- Key toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.U then
		isLockedOn = not isLockedOn
		if isLockedOn then
			print("[Lock-On] Toggled ON")
			enableLockOn()
		else
			print("[Lock-On] Toggled OFF")
			lockOnTarget = nil
			indicator.Visible = false
			Camera.CameraType = Enum.CameraType.Custom
			RunService:UnbindFromRenderStep("LockOnCamera")
		end
	end
end)

-- Update target indicator and unlock if lost
RunService.RenderStepped:Connect(function()
	if isLockedOn and lockOnTarget and lockOnTarget.Character and lockOnTarget.Character:FindFirstChild("HumanoidRootPart") then
		local hrp = lockOnTarget.Character.HumanoidRootPart
		local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)

		if onScreen then
			indicator.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y)
			indicator.Visible = true
		else
			indicator.Visible = false
		end
	else
		if isLockedOn then
			print("[Lock-On] Target lost. Unlocking.")
			isLockedOn = false
			lockOnTarget = nil
			indicator.Visible = false
			Camera.CameraType = Enum.CameraType.Custom
			RunService:UnbindFromRenderStep("LockOnCamera")
		end
	end
end)
