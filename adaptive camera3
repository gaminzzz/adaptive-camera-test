local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = game.Workspace.CurrentCamera

local torso = character:WaitForChild("Torso") or character:WaitForChild("UpperTorso")  -- Check for both R15 and R6 rigs

local isFirstPerson = false
local thirdPersonOffset = CFrame.new(0, 5, -10)  -- Default offset for third-person view
local mouse = player:GetMouse()

local function updateCamera()
    if isFirstPerson then  -- First-person view
        camera.CFrame = torso.CFrame * CFrame.new(0, 1.5, 0)  -- Offset camera upwards for head perspective
        print("First-person view, camera follows head perspective")
    else  -- Third-person view
        local lookVector = (torso.Position - mouse.Hit.p).unit  -- Calculate look direction
        local desiredCFrame = CFrame.new(torso.Position + Vector3.new(0, 5, 0) - lookVector * 10, torso.Position)
        camera.CFrame = camera.CFrame:Lerp(desiredCFrame, 0.1)  -- Smooth transition without diagonal issue
        print("Third-person view, camera follows torso with correct alignment")
    end
end

-- Toggle between first-person and third-person view
local function onKeyPress(input)
    if input.KeyCode == Enum.KeyCode.J then
        isFirstPerson = not isFirstPerson  -- Toggle the view mode
        print("Toggled view mode: " .. (isFirstPerson and "First-person" or "Third-person"))
    end
end

-- Connect to character added event to handle character respawns
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    torso = character:WaitForChild("Torso") or character:WaitForChild("UpperTorso")
end)

-- Connect to UserInputService to detect key presses
game:GetService("UserInputService").InputBegan:Connect(onKeyPress)

-- Continuously update the camera's position and orientation
game:GetService("RunService").RenderStepped:Connect(updateCamera)
