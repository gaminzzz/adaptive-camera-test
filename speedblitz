local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- CONFIG
local moveDuration = 0.5       -- Total sidestep time
local teleportOffset = 8       -- Distance teleported sideways
local subtleSlideDistance = 2 -- Pre/post slide tweak
local forwardBoost = 10         -- Small push forward

-- ASSETS
local dashEffect = ReplicatedStorage:WaitForChild("Utils"):WaitForChild("DashCancel"):WaitForChild("Wind")
local dashSound = ReplicatedStorage:WaitForChild("Sounds"):WaitForChild("DashWhoosh")

local leftAnim = Instance.new("Animation")
leftAnim.AnimationId = "rbxassetid://9443520855"

local rightAnim = Instance.new("Animation")
rightAnim.AnimationId = "rbxassetid://9443521999"

-- STATE
local toggleDash = false
local dashCoroutine
local currentAnimTrack

-- EFFECT HELPERS
local function playDashEffect()
	if not character or not humanoidRootPart then return end
	local clone = dashEffect:Clone()
	clone.CFrame = humanoidRootPart.CFrame
	clone.Parent = workspace
	Debris:AddItem(clone, 1)
end

local function playDashSound()
	local soundClone = dashSound:Clone()
	soundClone.Parent = humanoidRootPart
	soundClone:Play()
	Debris:AddItem(soundClone, 2)
end

local function flashMotionBlur()
	local blur = Lighting:FindFirstChild("DashBlur")
	if not blur then
		blur = Instance.new("BlurEffect")
		blur.Name = "DashBlur"
		blur.Size = 0
		blur.Parent = Lighting
	end

	blur.Size = 24
	task.delay(0.1, function()
		for i = 1, 12 do
			blur.Size = blur.Size - 2
			task.wait(0.01)
		end
		blur.Size = 0
	end)
end

-- SIDESTEP FUNCTION
local function dash(direction)
	if not character or not humanoidRootPart then return end

	-- Stop current animation
	if currentAnimTrack then
		currentAnimTrack:Stop()
	end

	-- Play animation
	local animToPlay = direction == -1 and leftAnim or rightAnim
	currentAnimTrack = humanoid:LoadAnimation(animToPlay)
	currentAnimTrack:Play()

	-- Pre-slide
	humanoidRootPart.CFrame += humanoidRootPart.CFrame.RightVector * direction * subtleSlideDistance
	task.wait(moveDuration / 3)

	-- Teleport + forward nudge
	humanoidRootPart.CFrame += humanoidRootPart.CFrame.RightVector * direction * teleportOffset
	humanoidRootPart.Velocity = humanoidRootPart.CFrame.LookVector * forwardBoost

	-- Post-slide
	humanoidRootPart.CFrame += humanoidRootPart.CFrame.RightVector * direction * subtleSlideDistance

	-- Effects
	playDashEffect()
	playDashSound()
	flashMotionBlur()
end

-- TOGGLE LOOP
local function startTogglingDashes()
	dashCoroutine = coroutine.create(function()
		while toggleDash do
			dash(-1)
			task.wait(moveDuration)
			if not toggleDash then break end
			dash(1)
			task.wait(moveDuration)
		end
	end)
	coroutine.resume(dashCoroutine)
end

local function stopTogglingDashes()
	toggleDash = false
	if dashCoroutine and coroutine.status(dashCoroutine) == "suspended" then
		coroutine.close(dashCoroutine)
	end
	if currentAnimTrack then
		currentAnimTrack:Stop()
		currentAnimTrack = nil
	end
end

-- INPUT
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.J then
		dash(-1)
	elseif input.KeyCode == Enum.KeyCode.L then
		dash(1)
	elseif input.KeyCode == Enum.KeyCode.K then
		toggleDash = not toggleDash
		if toggleDash then
			startTogglingDashes()
		else
			stopTogglingDashes()
		end
	end
end)
