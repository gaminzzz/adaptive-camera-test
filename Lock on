local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
LocalPlayer.CameraMode = Enum.CameraMode.Classic
local Camera = Workspace.CurrentCamera

-- Create GUI and indicator
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LockOnGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local indicator = Instance.new("Frame")
indicator.Name = "LockOnIndicator"
indicator.Size = UDim2.new(0, 10, 0, 10)
indicator.BackgroundColor3 = Color3.new(1, 0, 0)
indicator.BorderSizePixel = 0
indicator.Visible = false
indicator.AnchorPoint = Vector2.new(0.5, 0.5)
indicator.Position = UDim2.new(0.5, 0, 0.5, 0)
indicator.Parent = screenGui

print("[Lock-On] Script loaded successfully.")

local isLockedOn = false
local lockOnTarget = nil
local lockOnRange = 100 -- studs

-- Toggle with "U"
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.U then
		isLockedOn = not isLockedOn

		if isLockedOn then
			print("[Lock-On] Toggled ON.")

			local rayOrigin = Camera.CFrame.Position
			local rayDirection = Camera.CFrame.LookVector * lockOnRange

			local raycastParams = RaycastParams.new()
			raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
			raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

			local result = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)

			if result and result.Instance then
				local hitPart = result.Instance
				local targetModel = hitPart:FindFirstAncestorOfClass("Model")
				if targetModel and Players:GetPlayerFromCharacter(targetModel) then
					lockOnTarget = Players:GetPlayerFromCharacter(targetModel)
					print("[Lock-On] Locked onto:", lockOnTarget.Name)
					indicator.Visible = true
					Camera.CameraType = Enum.CameraType.Scriptable
				else
					print("[Lock-On] No valid player found at crosshair.")
					isLockedOn = false
					lockOnTarget = nil
					indicator.Visible = false
					Camera.CameraType = Enum.CameraType.Custom
				end
			else
				print("[Lock-On] Nothing hit by raycast.")
				isLockedOn = false
				lockOnTarget = nil
				indicator.Visible = false
				Camera.CameraType = Enum.CameraType.Custom
			end
		else
			print("[Lock-On] Toggled OFF.")
			lockOnTarget = nil
			indicator.Visible = false
			Camera.CameraType = Enum.CameraType.Custom
		end
	end
end)

-- Update UI indicator
RunService.RenderStepped:Connect(function()
	if isLockedOn and lockOnTarget and lockOnTarget.Character and lockOnTarget.Character:FindFirstChild("HumanoidRootPart") then
		local hrp = lockOnTarget.Character.HumanoidRootPart
		local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)

		if onScreen then
			indicator.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y)
			indicator.Visible = true
		else
			indicator.Visible = false
		end
	else
		if isLockedOn then
			print("[Lock-On] Lost target. Unlocking.")
			isLockedOn = false
			lockOnTarget = nil
			indicator.Visible = false
			Camera.CameraType = Enum.CameraType.Custom
		end
	end
end)

-- Camera: stay at player, rotate toward target
RunService:BindToRenderStep("LockOnCamera", Enum.RenderPriority.Camera.Value + 1, function()
	if isLockedOn and lockOnTarget and lockOnTarget.Character and lockOnTarget.Character:FindFirstChild("HumanoidRootPart") then
		local targetHRP = lockOnTarget.Character.HumanoidRootPart
		local character = LocalPlayer.Character
		if not character or not character:FindFirstChild("Head") then return end

		local head = character.Head
		local camPosition = head.Position + Vector3.new(0, 0.5, 0)
		local lookAt = targetHRP.Position + Vector3.new(0, 2, 0)

		Camera.CFrame = CFrame.new(camPosition, lookAt)
	else
		RunService:UnbindFromRenderStep("LockOnCamera")
		Camera.CameraType = Enum.CameraType.Custom
	end
end)
