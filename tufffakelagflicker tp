local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- ========== GUI Setup ==========
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FlickerGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local textBox = Instance.new("TextBox")
textBox.Name = "FlickerIntervalBox"
textBox.Size = UDim2.new(0, 150, 0, 40)
textBox.Position = UDim2.new(0, 10, 0, 10)
textBox.Text = "1"
textBox.PlaceholderText = "Flicker time (sec)"
textBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
textBox.BorderSizePixel = 0
textBox.ClearTextOnFocus = false
textBox.Font = Enum.Font.SourceSans
textBox.TextScaled = true
textBox.Parent = screenGui

-- ========== Flicker Logic ==========
local flickerInterval = 1 -- default interval
local timeSinceLastFlicker = 0
local teleportToPast = true

local mode = "none" -- "past", "random", or "none"

local positionHistory = {}
local historyDuration = 2 -- seconds
local originPosition = nil

-- Handle textbox value change
textBox.FocusLost:Connect(function()
	local val = tonumber(textBox.Text)
	if val and val > 0 then
		flickerInterval = val
	else
		textBox.Text = tostring(flickerInterval)
	end
end)

-- Handle input toggles
UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end

	if input.KeyCode == Enum.KeyCode.Z then
		if mode == "past" then
			mode = "none"
		else
			mode = "past"
		end
	elseif input.KeyCode == Enum.KeyCode.X then
		if mode == "random" then
			mode = "none"
		else
			mode = "random"
			originPosition = hrp.Position
		end
	end
end)

-- ========== Main Loop ==========
RunService.RenderStepped:Connect(function(dt)
	if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
		character = player.Character or player.CharacterAdded:Wait()
		hrp = character:WaitForChild("HumanoidRootPart")
		positionHistory = {}
		return
	end

	-- Update origin if in random mode
	if mode == "random" then
		originPosition = originPosition + (hrp.Position - originPosition) * 0.05 -- smooth follow
	end

	-- Record position history
	table.insert(positionHistory, 1, hrp.CFrame)
	if #positionHistory > (60 * historyDuration) then
		table.remove(positionHistory)
	end

	-- Flicker logic
	if mode ~= "none" then
		timeSinceLastFlicker += dt
		if timeSinceLastFlicker >= flickerInterval then
			if mode == "past" then
				local index = math.floor(60 * historyDuration)
				local past = positionHistory[index]
				if past then
					hrp.CFrame = teleportToPast and past or positionHistory[1]
					teleportToPast = not teleportToPast
				end
			elseif mode == "random" and originPosition then
				local radius = 5
				local offset = Vector3.new(
					math.random(-radius * 100, radius * 100) / 100,
					0,
					math.random(-radius * 100, radius * 100) / 100
				)
				hrp.CFrame = CFrame.new(originPosition + offset, hrp.Position + hrp.CFrame.LookVector)
			end
			timeSinceLastFlicker = 0
		end
	end
end)

