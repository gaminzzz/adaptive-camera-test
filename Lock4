local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
LocalPlayer.CameraMode = Enum.CameraMode.Classic
local Camera = Workspace.CurrentCamera

-- GUI and Lock-On Indicator
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LockOnGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local indicator = Instance.new("Frame")
indicator.Name = "LockOnIndicator"
indicator.Size = UDim2.new(0, 10, 0, 10)
indicator.BackgroundColor3 = Color3.new(1, 0, 0)
indicator.BorderSizePixel = 0
indicator.Visible = false
indicator.AnchorPoint = Vector2.new(0.5, 0.5)
indicator.Position = UDim2.new(0.5, 0, 0.5, 0)
indicator.Parent = screenGui

print("[Lock-On] Script loaded successfully.")

-- State
local isLockedOn = false
local lockOnTarget = nil
local lockOnRange = 100

-- Zoom & Prediction
local cameraDistance = 6
local minZoom = 4
local maxZoom = 12
local predictionAmount = 0

-- Chat prediction config
LocalPlayer.Chatted:Connect(function(msg)
	local num = tonumber(msg)
	if num then
		predictionAmount = num
		print("[Lock-On] Prediction set to", predictionAmount, "studs")
	end
end)

-- Scroll wheel zoom
UserInputService.InputChanged:Connect(function(input)
	if isLockedOn and input.UserInputType == Enum.UserInputType.MouseWheel then
		cameraDistance = math.clamp(cameraDistance - input.Position.Z, minZoom, maxZoom)
	end
end)

--  REPLACED: ULTRA-HARD LOCKED updateCamera
local function updateCamera()
	if not (isLockedOn and lockOnTarget) then return end
	local targetChar = lockOnTarget.Character
	local myChar = LocalPlayer.Character
	if not (targetChar and myChar) then return end

	local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
	local myHRP = myChar:FindFirstChild("HumanoidRootPart")
	if not (targetHRP and myHRP) then return end

	local velocity = targetHRP.Velocity
	local distance = (myHRP.Position - targetHRP.Position).Magnitude
	local falloff = math.clamp(distance / 100, 0, 1)
	local pred = predictionAmount * falloff

	local prediction = velocity.Magnitude > 1 and (velocity.Unit * pred) or Vector3.zero
	local lookTarget = targetHRP.Position + prediction + Vector3.new(0, 2, 0)

	local heightAbove = 3
	local backOffset = -myHRP.CFrame.LookVector * cameraDistance
	local cameraPos = myHRP.Position + backOffset + Vector3.new(0, heightAbove, 0)

	Camera.CFrame = CFrame.new(cameraPos, lookTarget)
end

-- Lock-on detection
local function enableLockOn()
	local rayOrigin = Camera.CFrame.Position
	local rayDirection = Camera.CFrame.LookVector * lockOnRange

	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

	local result = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)

	if result and result.Instance then
		local hitPart = result.Instance
		local targetModel = hitPart:FindFirstAncestorOfClass("Model")
		if targetModel and Players:GetPlayerFromCharacter(targetModel) then
			lockOnTarget = Players:GetPlayerFromCharacter(targetModel)
			print("[Lock-On] Locked onto:", lockOnTarget.Name)
			indicator.Visible = true
			Camera.CameraType = Enum.CameraType.Scriptable
			RunService:BindToRenderStep("LockOnCamera", Enum.RenderPriority.Camera.Value + 1, updateCamera)
		else
			print("[Lock-On] No valid player.")
			isLockedOn = false
		end
	else
		print("[Lock-On] Nothing hit.")
		isLockedOn = false
	end
end

--  Toggle Lock-On with **H**
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.H then
		isLockedOn = not isLockedOn
		if isLockedOn then
			print("[Lock-On] Toggled ON")
			enableLockOn()
		else
			print("[Lock-On] Toggled OFF")
			lockOnTarget = nil
			indicator.Visible = false
			Camera.CameraType = Enum.CameraType.Custom
			RunService:UnbindFromRenderStep("LockOnCamera")
		end
	end
end)

-- Target indicator + lost target cleanup
RunService.RenderStepped:Connect(function()
	if isLockedOn and lockOnTarget and lockOnTarget.Character and lockOnTarget.Character:FindFirstChild("HumanoidRootPart") then
		local hrp = lockOnTarget.Character.HumanoidRootPart
		local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)

		if onScreen then
			indicator.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y)
			indicator.Visible = true
		else
			indicator.Visible = false
		end
	else
		if isLockedOn then
			print("[Lock-On] Target lost. Unlocking.")
			isLockedOn = false
			lockOnTarget = nil
			indicator.Visible = false
			Camera.CameraType = Enum.CameraType.Custom
			RunService:UnbindFromRenderStep("LockOnCamera")
		end
	end
end)
