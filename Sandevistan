-- made by mr tuff himself
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

-- Config
local active = false
local wsGain = 3.24       -- WalkSpeed gain per 0.1s
local wsCap = 300       -- maximum WalkSpeed
local wsDefault = 20   -- reset point
local wsDecay = 100      -- WalkSpeed decay per 0.1s when no keys pressed
local afterimageTransparency = 0.2
local maxAfterimages = 10
local rainbowColors = {
    Color3.fromRGB(255,0,0),
    Color3.fromRGB(255,64,0),
    Color3.fromRGB(255,128,0),
    Color3.fromRGB(255,191,0),
    Color3.fromRGB(255,255,0),
    Color3.fromRGB(0,255,0),
    Color3.fromRGB(0,0,255),
    Color3.fromRGB(75,0,130),
    Color3.fromRGB(148,0,211),
}

-- Movement keys
local movementKeys = {
    [Enum.KeyCode.W] = false,
    [Enum.KeyCode.A] = false,
    [Enum.KeyCode.S] = false,
    [Enum.KeyCode.D] = false,
}

local function anyMovementKeyHeld()
    for _, held in pairs(movementKeys) do
        if held then return true end
    end
    return false
end

-- Screen effect
local tint = Instance.new("ColorCorrectionEffect")
tint.TintColor = Color3.fromRGB(0,255,0)
tint.Enabled = false
tint.Parent = Lighting

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if movementKeys[input.KeyCode] ~= nil then
        movementKeys[input.KeyCode] = true
    end
    if input.KeyCode == Enum.KeyCode.Backquote then
        active = not active
        tint.Enabled = active
        if not active then
            humanoid.WalkSpeed = wsDefault
            local anim = humanoid:FindFirstChildOfClass("Animator")
            if anim then
                anim:SetPlaybackSpeed(1)
            end
        end
    end
end)

UIS.InputEnded:Connect(function(input)
    if movementKeys[input.KeyCode] ~= nil then
        movementKeys[input.KeyCode] = false
    end
end)

-- Position history
local history = {}
local historyLength = 200

RunService.Heartbeat:Connect(function()
    if char and char.PrimaryPart then
        table.insert(history,1,char.PrimaryPart.CFrame)
        if #history > historyLength then
            table.remove(history)
        end
    end
end)

-- Afterimage spawner
local function cloneAfterimage(color, offsetIndex)
    if not history[offsetIndex] then return end
    local c = char:Clone()
    for _, d in pairs(c:GetDescendants()) do
        if d:IsA("BasePart") or d:IsA("Decal") then
            d.Transparency = afterimageTransparency
            if d:IsA("BasePart") then
                d.Color = color
                d.Anchored = true
                d.CanCollide = false
            end
        elseif d:IsA("Script") then
            d:Destroy()
        end
    end
    c.Parent = workspace
    c:SetPrimaryPartCFrame(history[offsetIndex])

    TweenService:Create(c.PrimaryPart, TweenInfo.new(0.5), {Transparency = 1}):Play()
    game:GetService("Debris"):AddItem(c,0.6)
end

-- Speed and afterimage loop
task.spawn(function()
    while true do
        task.wait(0.1)
        if active then
            if anyMovementKeyHeld() then
                humanoid.WalkSpeed = math.min(humanoid.WalkSpeed + wsGain, wsCap)
            else
                humanoid.WalkSpeed = math.max(humanoid.WalkSpeed - wsDecay, wsDefault)
            end

            local anim = humanoid:FindFirstChildOfClass("Animator")
            if anim then
                anim:SetPlaybackSpeed(humanoid.WalkSpeed/wsDefault)
            end

            local numAfterimages = math.clamp(math.floor((humanoid.WalkSpeed-wsDefault)/10),0,maxAfterimages)
            if numAfterimages > 0 then
                local baseColorIndex = math.random(1,#rainbowColors)
                for i=1,numAfterimages do
                    local color = rainbowColors[(baseColorIndex+i-2)%#rainbowColors+1]
                    local offset = i*5
                    cloneAfterimage(color, offset)
                end
            end
        end
    end
end)

-- Chat config command (unchanged)
player.Chatted:Connect(function(msg)
    if msg:sub(1,3) == "/e " then
        local parts = string.split(msg," ")
        if tonumber(parts[2]) and tonumber(parts[3]) then
            wsGain = tonumber(parts[2])
            wsCap = tonumber(parts[3])
            StarterGui:SetCore("ChatMakeSystemMessage",{
                Text = string.format("Config updated: gain=%.2f, cap=%d",wsGain,wsCap),
                Color = Color3.fromRGB(0,255,0)
            })
        end
    end
end)
