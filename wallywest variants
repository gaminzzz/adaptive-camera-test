local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Cooldown control
local canActivate = true
local cooldownTime = 0.4
local movementActive = false
local movementConnection

-- CONFIG
local sideDistance = 12
local sideTeleportDelay = 0.05
local teleportRepeats = 3
local forwardSpeed = 100

-- Aerial variant config
local verticalBoostHeight = 20
local verticalBoostSpeed = 200
local circleDuration = 0.3
local circleRadius = 10
local dashDistance = 80
local dashSpeed = 250

-- Forward movement on ground (flat)
local function startForwardMovement(hrp)
    movementConnection = RunService.RenderStepped:Connect(function(dt)
        if not movementActive then
            movementConnection:Disconnect()
            return
        end
        local camLook = camera.CFrame.LookVector
        local flatDir = Vector3.new(camLook.X, 0, camLook.Z).Unit
        hrp.CFrame = hrp.CFrame + flatDir * forwardSpeed * dt
    end)
end

-- Zigzag teleport
local function teleportSideways(hrp)
    local direction = 1
    for i = 1, teleportRepeats do
        local rightVector = hrp.CFrame.RightVector.Unit
        local offset = rightVector * sideDistance * direction
        hrp.CFrame = hrp.CFrame + offset
        task.wait(sideTeleportDelay)
        hrp.CFrame = hrp.CFrame - offset
        task.wait(sideTeleportDelay)
        direction = -direction
    end
end

-- Pure vertical launch (world-up)
local function verticalLaunch(hrp, onComplete)
    local moved = 0
    local connection
    connection = RunService.RenderStepped:Connect(function(dt)
        local step = verticalBoostSpeed * dt
        if moved + step >= verticalBoostHeight then
            step = verticalBoostHeight - moved
            connection:Disconnect()
            if onComplete then onComplete() end
        end
        hrp.CFrame = hrp.CFrame + Vector3.new(0, step, 0)
        moved += step
    end)
end

-- Orbit in a flat circle around fixed center (world horizontal)
local function orbitInFlatCircle(hrp, centerPos, onComplete)
    local startTime = tick()
    local connection
    connection = RunService.RenderStepped:Connect(function()
        local elapsed = tick() - startTime
        if elapsed >= circleDuration then
            connection:Disconnect()
            if onComplete then onComplete() end
            return
        end

        local angle = 2 * math.pi * (elapsed / circleDuration)
        local x = math.cos(angle) * circleRadius
        local z = math.sin(angle) * circleRadius
        local offset = Vector3.new(x, 0, z)

        local newPos = centerPos + offset
        hrp.CFrame = CFrame.new(newPos, centerPos)
    end)
end

-- Full 3D dash in camera look direction
local function dashForward3D(hrp)
    local moved = 0
    local direction = camera.CFrame.LookVector.Unit
    local connection
    connection = RunService.RenderStepped:Connect(function(dt)
        local step = dashSpeed * dt
        if moved + step >= dashDistance then
            step = dashDistance - moved
            connection:Disconnect()
        end
        hrp.CFrame = hrp.CFrame + direction * step
        moved += step
    end)
end

-- Main ability handler
local function activateMovement(spaceHeld)
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    if movementActive then return end
    movementActive = true

    if spaceHeld then
        local originalPos = hrp.Position

        verticalLaunch(hrp, function()
            local circleCenter = hrp.Position
            orbitInFlatCircle(hrp, circleCenter, function()
                dashForward3D(hrp)
                task.delay(0.3, function()
                    movementActive = false
                end)
            end)
        end)
    else
        startForwardMovement(hrp)
        task.spawn(function()
            teleportSideways(hrp)
            movementActive = false
        end)
    end
end

-- Input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q and canActivate then
        canActivate = false
        local spaceHeld = UserInputService:IsKeyDown(Enum.KeyCode.Space)
        activateMovement(spaceHeld)
        task.delay(cooldownTime, function()
            canActivate = true
        end)
    end
end)
